<behaviortree version="1.1" repeatuntil="" name="KnightAI" debugbreak="False"><selector usepriorities="False" repeatuntil="" name="root" debugbreak="False"><constraint repeatuntil="" priority="" name="Patrol State" debugbreak="False" constraint="state == &quot;patrol&quot;"><mecparam valueexpression="2" repeatuntil="" parametertype="float" parametername="speed" name="set speed to 2 " debugbreak="False" damptime="0"></mecparam><parallel tiebreaker="fail" succeed="any" repeatuntil="" name="patrol while looking for player" fail="all" debugbreak="False"><detect sensor="&quot;Visual Sensor&quot;" repeatuntil="success" name="detect if playe is in visual range" matchtype="best" entityobjectvariable="" debugbreak="False" consistent="True" aspectvariable="playerObject" aspectobjectvariable="" aspect="&quot;Player&quot;"></detect><waypointpatrol waypointsetvariable="&quot;Patrol Route&quot;" waypointactiontype="patrol" traversetype="pingpong" traverseorder="forward" repeatuntil="" pathtargetvariable="" name="waypointpatrol" movetargetvariable="patrolTarget" debugbreak="False"><move turnspeed="" repeatuntil="" name="move" movetarget="patrolTarget" movespeed="3" facetarget="" debugbreak="False" closeenoughdistance="" closeenoughangle=""></move></waypointpatrol></parallel><expression returnvalue="success" repeatuntil="" name="change state to pursue" expression="state = &quot;pursue&quot;" debugbreak="False"></expression></constraint><constraint repeatuntil="" priority="" name="Pursue state" debugbreak="False" constraint="state == &quot;pursue&quot;"><mecparam valueexpression="2" repeatuntil="" parametertype="float" parametername="speed" name="set speed to 2" debugbreak="False" damptime="0"></mecparam><parallel tiebreaker="fail" succeed="any" repeatuntil="" name="chase player" fail="all" debugbreak="False"><selector usepriorities="False" repeatuntil="" name="detect if player goes away" debugbreak="False"><detect sensor="&quot;Visual Sensor&quot;" repeatuntil="failure" priority="" name="detect if playe is in visual range" matchtype="best" entityobjectvariable="" debugbreak="False" consistent="True" aspectvariable="" aspectobjectvariable="" aspect="&quot;Player&quot;"></detect><expression returnvalue="failure" repeatuntil="" priority="" name="change to patrol" expression="state = &quot;patrol&quot;" debugbreak="False"></expression></selector><move turnspeed="" repeatuntil="" name="move" movetarget="playerObject" movespeed="3" facetarget="" debugbreak="False" closeenoughdistance="" closeenoughangle=""></move><detect sensor="&quot;Attack Sensor&quot;" repeatuntil="success" name="detect if player is in attack range" matchtype="best" entityobjectvariable="" debugbreak="False" consistent="True" aspectvariable="Player" aspectobjectvariable="" aspect="&quot;Player&quot;"></detect></parallel><expression returnvalue="success" repeatuntil="" name="change to attack" expression="state = &quot;attack&quot;" debugbreak="False"></expression></constraint><constraint repeatuntil="" priority="" name="Attack State" debugbreak="False" constraint="state == &quot;attack&quot;"><mecparam valueexpression="0" repeatuntil="" parametertype="float" parametername="speed" name="set speed to 0" debugbreak="False" damptime="0"></mecparam><mecparam valueexpression="true" repeatuntil="" parametertype="trigger" parametername="attack" name="set attack to true" debugbreak="False" damptime="0"></mecparam><action repeatuntil="" parametervalues="" parameters="" namespace="(global)" name="creat ball" debugbreak="False" classname="KnightCreateBall"></action><timer waitforsec="1" returnvalue="success" name="wait 1 second" debugbreak="False"></timer><selector usepriorities="False" repeatuntil="" name="selector" debugbreak="False"><detect sensor="&quot;Attack Sensor&quot;" repeatuntil="" priority="" name="detect if player is in attack range" matchtype="best" entityobjectvariable="" debugbreak="False" consistent="True" aspectvariable="Player" aspectobjectvariable="" aspect="&quot;Player&quot;"></detect><expression returnvalue="success" repeatuntil="" priority="" name="change state to pursue" expression="state = &quot;pursue&quot;" debugbreak="False"></expression></selector></constraint></selector></behaviortree>